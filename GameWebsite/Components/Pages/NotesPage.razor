@page "/notes-form"
@using GameWebsite.Data
@using GameWebsite.Models
@inject INoteBook nb

<h2>Submit Your Entry</h2>

<form @onsubmit="Submit" class="form-container">
    <label for="username" class="form-label">Username:</label>
    <input type="text" id="username" @bind=userName required class="form-input" />

    <label for="notes" class="form-label">Notes / Hints:</label>
    <textarea id="notes" @bind=notesText required class="form-textarea"></textarea>

    <!-- Player Selection -->
    <label for="player" class="form-label">Player</label>
    <select id="player" @bind="selectedPlayerName" class="form-select">
        <option value="">-- Select --</option>
        @foreach (Player player in GameData.players.Values)
        {
            <option value="@player.Name">@player.Name</option>
        }
    </select>

    <!-- Enemy Selection -->
    <label for="enemy" class="form-label">Enemy</label>
    <select id="enemy" @bind="selectedEnemyName" class="form-select">
        <option value="">-- Select --</option>
        @foreach (Enemy enemy in GameData.enemies.Values)
        {
            <option value="@enemy.Name">@enemy.Name</option>
        }
    </select>

    <!-- Weapon Selection -->
    <label for="weapon" class="form-label">Weapon</label>
    <select id="weapon" @bind="selectedWeaponName" class="form-select">
        <option value="">-- Select --</option>
        @foreach (Weapon weapon in GameData.weapons.Values)
        {
            <option value="@weapon.Name">@weapon.Name</option>
        }
    </select>

    <!-- Potion Selection -->
    <label for="potion" class="form-label">Potion</label>
    <select id="potion" @bind="selectedPotionName" class="form-select">
        <option value="">-- Select --</option>
        @foreach (Potion potion in GameData.potions.Values)
        {
            <option value="@potion.Name">@potion.Name</option>
        }
    </select>

    <button type="submit" class="form-button">Submit</button>
</form>

<h3>Notes</h3>
<ol class="notes-list">
    @for (int i = 0; i < nb.GetNoteCount(); i++)
    {
        <li class="note-item">
            <p><strong>Username:</strong> @(nb.GetNote(i).UserName)<br /></p>
            <p><strong>Note:</strong> @(nb.GetNote(i).NoteText)<br /></p>
            @foreach (var reference in nb.GetNote(i).Refrences)
            {
                @if (reference != null)
                {
                    if (reference is Player player)
                    {
                        <p><a href="/characterdetails/@player.Id" class="note-link">@player.Name</a></p>
                    }
                    else if (reference is Enemy enemy)
                    {
                        <p><a href="/characterdetails/@enemy.Id" class="note-link">@enemy.Name</a></p>
                    }
                    else if (reference is Weapon weapon)
                    {
                        <p><a href="/itemdetails/@weapon.Id" class="note-link">@weapon.Name</a></p>
                    }
                    else if (reference is Potion potion)
                    {
                        <p><a href="/itemdetails/@potion.Id" class="note-link">@potion.Name</a></p>
                    }
                }
            }

            <button @onclick="() => EditNote(nb.GetNote(i - 1), i - 1)" class="form-button">Edit</button>
            <button @onclick="() => DeleteNote(i - 1)" class="form-button">Delete</button>
        </li>
    }
</ol>

<style>
    .form-container {
    max-width: 600px;
    margin: 0 auto;
    padding: 20px;
    background-color: #f9f9f9;
    border-radius: 8px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    }

    .form-label {
    display: block;
    margin-bottom: 8px;
    font-size: 1.1em;
    color: #333;
    }

    .form-input, .form-select, .form-textarea {
    width: 100%;
    padding: 10px;
    margin-bottom: 15px;
    border-radius: 4px;
    border: 1px solid #ccc;
    font-size: 1em;
    }

    .form-textarea {
    height: 100px;
    resize: vertical;
    }

    .form-button {
    background-color: #007bff;
    color: white;
    padding: 10px 20px;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    font-size: 1.1em;
    }

    .form-button:hover {
    background-color: #0056b3;
    }

    .notes-list {
    list-style-type: none;
    padding-left: 0;
    }

    .note-item {
    padding: 10px;
    background-color: #f0f0f0;
    margin-bottom: 10px;
    border-radius: 4px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }

    .note-item p {
    margin: 5px 0;
    }

    .note-link {
    color: #007bff;
    text-decoration: none;
    }

    .note-link:hover {
    text-decoration: underline;
    }
</style>

@code {
    private string userName;
    private string notesText;

    private string? selectedPlayerName;
    private string? selectedEnemyName;
    private string? selectedWeaponName;
    private string? selectedPotionName;

    private Player? playerRef;
    private Enemy? enemyRef;
    private Weapon? weaponRef;
    private Potion? potionRef;

    private bool currentlyEditingNote = false;

    private int editingIndex = -1;

    private async Task Submit(EventArgs e)
    {
        playerRef = selectedPlayerName != null && GameData.players.TryGetValue(selectedPlayerName, out var foundPlayer) ? foundPlayer : null;
        enemyRef = selectedEnemyName != null && GameData.enemies.TryGetValue(selectedEnemyName, out var foundEnemy) ? foundEnemy : null;
        weaponRef = selectedWeaponName != null && GameData.weapons.TryGetValue(selectedWeaponName, out var foundWeapon) ? foundWeapon : null;
        potionRef = selectedPotionName != null && GameData.potions.TryGetValue(selectedPotionName, out var foundPotion) ? foundPotion : null;

        nb.AddNote(userName, notesText, playerRef, enemyRef, weaponRef, potionRef);

        userName = "";
        notesText = "";
        selectedPlayerName = "";
        selectedEnemyName = "";
        selectedWeaponName = "";
        selectedPotionName = "";

        StateHasChanged();
    }

    private async Task EditNote(Note note, int index)
    {
        userName = note.UserName;
        notesText = note.NoteText;

        foreach (var reference in note.Refrences)
        {
            if (reference != null)
            {
                if (reference is Player player)
                {
                    selectedPlayerName = player.Name;
                }
                else if (reference is Enemy enemy)
                {
                    selectedEnemyName = enemy.Name;
                }
                else if (reference is Weapon weapon)
                {
                    selectedWeaponName = weapon.Name;
                }
                else if (reference is Potion potion)
                {
                    selectedPotionName = potion.Name;
                }
            }
        }

        nb.RemoveNote(index);

        StateHasChanged();
    }

    private void DeleteNote(int index)
    {
        nb.RemoveNote(index);
        StateHasChanged();
    }
}
