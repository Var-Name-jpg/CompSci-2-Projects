@page "/play-game/{numberOfPlayers:int}"
@using BuchananWar
@using BuchananWar.Models
@inject NavigationManager Navigation

<PageTitle>Play</PageTitle>

<div class="game-container">
    <h1 class="text-center">War Card Game</h1>

    <!-- Display Round Result -->
    <div class="text-center">
        <h3>@message</h3>
    </div>

    <!-- If game is won or drawn, show winner/draw message and home button -->
    @if (!string.IsNullOrEmpty(winnerMessage))
    {
        <div class="text-center">
            <h2>@winnerMessage</h2>
            <button class="btn btn-primary btn-lg" @onclick="GoHome">Back to Home</button>
        </div>
    }
    else
    {
        <!-- Play Round Button -->
        <div class="text-center">
            <button class="btn btn-primary btn-lg play-button" @onclick="PlayRound">Play Round</button>
        </div>

        <!-- Manually Draw Game Button -->
        <div class="text-center mt-3">
            <button class="btn btn-danger btn-lg draw-button" @onclick="DrawGame">Draw Game</button>
        </div>

        <!-- Display Player Hands -->
        <div class="text-center mt-4">
            <h4>Player Hands</h4>
            <ul>
                @foreach (var player in game._playerHands.Hands.Keys)
                {
                    <li>@player: @game._playerHands.Hands[player].Cards.Count cards</li>
                }
            </ul>
        </div>
    }
</div>

<style>
    .game-container {
        max-width: 600px;
        margin: 50px auto;
        padding: 30px;
        background-color: #f8f9fa;
        border-radius: 10px;
        box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.2);
        text-align: center;
    }

    .play-button {
        margin-top: 20px;
        padding: 15px 30px;
        font-size: 1.25rem;
        border-radius: 8px;
        transition: all 0.3s ease-in-out;
    }

        .play-button:hover {
            transform: scale(1.1);
            box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.3);
        }

    .draw-button {
        margin-top: 20px;
        padding: 15px 30px;
        font-size: 1.25rem;
        border-radius: 8px;
        transition: all 0.3s ease-in-out;
    }

        .draw-button:hover {
            transform: scale(1.1);
            box-shadow: 0px 6px 14px rgba(0, 0, 0, 0.4);
        }

    .round-results {
        margin-top: 20px;
        font-size: 1.1rem;
        list-style-type: none;
        padding: 0;
    }

        .round-results li {
            margin-bottom: 10px;
        }

    .btn-danger {
        background-color: #e74c3c;
        border: none;
    }

        .btn-danger:hover {
            background-color: #c0392b;
        }
</style>

@code {
    /// <summary>
    /// Gets or sets the number of players participating in the game.
    /// </summary>
    [Parameter] public int numberOfPlayers { get; set; }

    private WarGame game;
    private string message;
    private string winnerMessage;

    /// <summary>
    /// Initializes the game and sets up the welcome message.
    /// </summary>
    protected override void OnInitialized()
    {
        game = new WarGame(numberOfPlayers); // Initialize the game with the selected number of players
        message = $"Welcome to the War Card Game! There are {numberOfPlayers} players. Click 'Play Round' to begin.";
    }

    /// <summary>
    /// Plays a single round of the game and updates the round result message.
    /// Checks for game-winning or draw conditions.
    /// </summary>
    private void PlayRound()
    {
        message = game.PlayRound(); // This will update the message with the round result

        // Check if the game has ended with a winner or draw
        if (message.Contains("wins the game"))
        {
            winnerMessage = message;
        }
        else if (message.Contains("The game was a draw"))
        {
            winnerMessage = message;
        }
    }

    /// <summary>
    /// Declares the game as a draw, updates messages, and clears player hands.
    /// </summary>
    private void DrawGame()
    {
        winnerMessage = "The game was a draw!"; // Manually set the winner message to a draw
        message = "The game was a draw!"; // Update the round message

        // Optionally, you can disable further gameplay by clearing the round result and hands
        game._playerHands.Hands.Clear(); // Clear hands so no rounds are played
    }

    /// <summary>
    /// Navigates back to the home page.
    /// </summary>
    private void GoHome()
    {
        Navigation.NavigateTo("/"); // Navigate to the home page
    }
}
